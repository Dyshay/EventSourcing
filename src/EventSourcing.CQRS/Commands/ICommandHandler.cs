using EventSourcing.Abstractions;

namespace EventSourcing.CQRS.Commands;

/// <summary>
/// Handler for commands that generate a specific event type.
/// The handler is responsible for validating the command and executing business logic.
/// </summary>
/// <typeparam name="TCommand">The command type to handle</typeparam>
/// <typeparam name="TEvent">The event type that will be generated</typeparam>
public interface ICommandHandler<in TCommand, TEvent>
    where TCommand : ICommand<TEvent>
    where TEvent : IEvent
{
    /// <summary>
    /// Handles the command and returns the generated event.
    /// </summary>
    /// <param name="command">The command to handle</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>The event generated by executing this command</returns>
    Task<CommandResult<TEvent>> HandleAsync(TCommand command, CancellationToken cancellationToken = default);
}

/// <summary>
/// Handler for commands that generate multiple events.
/// </summary>
/// <typeparam name="TCommand">The command type to handle</typeparam>
public interface ICommandHandlerMultiEvent<in TCommand>
    where TCommand : ICommandMultiEvent
{
    /// <summary>
    /// Handles the command and returns all generated events.
    /// </summary>
    /// <param name="command">The command to handle</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>All events generated by executing this command</returns>
    Task<CommandResult<IEnumerable<IEvent>>> HandleAsync(TCommand command, CancellationToken cancellationToken = default);
}
