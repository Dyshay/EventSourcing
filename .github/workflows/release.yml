name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (semver format: x.y.z)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Determine version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=v$VERSION" >> $GITHUB_OUTPUT

    - name: Restore dependencies
      run: dotnet restore EventSourcing.sln

    - name: Build
      run: dotnet build EventSourcing.sln --configuration Release --no-restore
      
    - name: Test
      run: dotnet test EventSourcing.sln --configuration Release --no-build
      env:
        # Use secret if available, otherwise fall back to local MongoDB service
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING || 'mongodb://localhost:27017' }}
        CI: true
        
    - name: Create and push tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.get_version.outputs.TAG }}" -m "Release ${{ steps.get_version.outputs.VERSION }}"
        git push origin "${{ steps.get_version.outputs.TAG }}"

    - name: Pack NuGet packages
      run: |
        mkdir -p ./packages
        dotnet pack src/EventSourcing.Abstractions/EventSourcing.Abstractions.csproj \
          --configuration Release \
          --no-build \
          --output ./packages \
          -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

        dotnet pack src/EventSourcing.Core/EventSourcing.Core.csproj \
          --configuration Release \
          --no-build \
          --output ./packages \
          -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

        dotnet pack src/EventSourcing.MongoDB/EventSourcing.MongoDB.csproj \
          --configuration Release \
          --no-build \
          --output ./packages \
          -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

        dotnet pack src/EventSourcing.CQRS/EventSourcing.CQRS.csproj \
          --configuration Release \
          --no-build \
          --output ./packages \
          -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

    - name: List generated packages
      run: |
        echo "Generated packages:"
        ls -la ./packages/

    - name: Validate packages
      run: |
        echo "Validating NuGet packages..."
        for package in ./packages/*.nupkg; do
          echo "Checking $package"
          dotnet nuget verify "$package" || echo "Warning: Package verification failed for $package"
        done

    - name: Push to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if [ -z "$NUGET_API_KEY" ]; then
          echo "‚ö†Ô∏è  NUGET_API_KEY secret not found. Skipping NuGet publish."
          echo "To publish to NuGet, add your NuGet API key as a repository secret named 'NUGET_API_KEY'"
          exit 0
        fi

        echo "üì¶ Pushing packages to NuGet..."
        dotnet nuget push "./packages/*.nupkg" \
          --api-key "$NUGET_API_KEY" \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate \
          --no-symbols

        echo "üîç Pushing symbol packages to NuGet..."
        dotnet nuget push "./packages/*.snupkg" \
          --api-key "$NUGET_API_KEY" \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate || echo "‚ö†Ô∏è  Symbol package upload failed (non-critical)"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        files: |
          ./packages/*.nupkg
          ./packages/*.snupkg
        generate_release_notes: true
        prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease == 'true' || false }}
        body: |
          ## üì¶ NuGet Packages (v${{ steps.get_version.outputs.VERSION }})

          | Package | Description |
          |---------|-------------|
          | [EventSourcing.Abstractions](https://www.nuget.org/packages/EventSourcing.Abstractions/${{ steps.get_version.outputs.VERSION }}) | Core abstractions and interfaces |
          | [EventSourcing.Core](https://www.nuget.org/packages/EventSourcing.Core/${{ steps.get_version.outputs.VERSION }}) | Core implementation with repository and snapshots |
          | [EventSourcing.MongoDB](https://www.nuget.org/packages/EventSourcing.MongoDB/${{ steps.get_version.outputs.VERSION }}) | MongoDB provider for event and snapshot stores |
          | [EventSourcing.CQRS](https://www.nuget.org/packages/EventSourcing.CQRS/${{ steps.get_version.outputs.VERSION }}) | CQRS implementation with command/query buses |

          ### üöÄ Quick Installation

          **For MongoDB Event Sourcing:**
          ```bash
          dotnet add package EventSourcing.MongoDB --version ${{ steps.get_version.outputs.VERSION }}
          ```

          **For CQRS with Event Sourcing:**
          ```bash
          dotnet add package EventSourcing.CQRS --version ${{ steps.get_version.outputs.VERSION }}
          dotnet add package EventSourcing.MongoDB --version ${{ steps.get_version.outputs.VERSION }}
          ```

          **Core only:**
          ```bash
          dotnet add package EventSourcing.Core --version ${{ steps.get_version.outputs.VERSION }}
          ```

          ### üîó Links
          - üìö [Documentation](https://github.com/Dyshay/EventSourcing#readme)
          - üêõ [Report Issues](https://github.com/Dyshay/EventSourcing/issues)
          - üí¨ [Discussions](https://github.com/Dyshay/EventSourcing/discussions)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
